generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comment {
  id          Int       @id @default(autoincrement())
  content     String    @db.Text
  userId      Int
  formationId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  formation   formation @relation(fields: [formationId], references: [id], map: "Comment_formationId_fkey")
  user        user      @relation(fields: [userId], references: [id], map: "Comment_userId_fkey")

  @@index([formationId], map: "Comment_formationId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model configurationdocument {
  id            Int      @id @default(autoincrement())
  cle           String   @unique(map: "ConfigurationDocument_cle_key")
  valeur        String   @db.Text
  description   String?  @db.Text
  modifiablePar String   @default("admin")
  createdAt     DateTime @default(now())
  updatedAt     DateTime
}

model demandedocument {
  id                                         Int                    @id @default(autoincrement())
  userId                                     Int
  typeDocumentId                             Int
  nomDemandeur                               String
  prenomDemandeur                            String
  emailDemandeur                             String
  numRegistreCommerce                        String
  statut                                     String                 @default("en_attente")
  motifRejet                                 String?                @db.Text
  registreCommercePdf                        String?
  photoIdentite                              String?
  autresDocuments                            String?                @db.Text
  notes                                      String?                @db.Text
  commentairesClient                         String?                @db.Text
  dateTraitement                             DateTime?
  adminTraitantId                            Int?
  createdAt                                  DateTime               @default(now())
  updatedAt                                  DateTime
  user_demandedocument_adminTraitantIdTouser user?                  @relation("demandedocument_adminTraitantIdTouser", fields: [adminTraitantId], references: [id], map: "DemandeDocument_adminTraitant_fkey")
  typedocument                               typedocument           @relation(fields: [typeDocumentId], references: [id], map: "DemandeDocument_typeDocument_fkey")
  user_demandedocument_userIdTouser          user                   @relation("demandedocument_userIdTouser", fields: [userId], references: [id], map: "DemandeDocument_userId_fkey")
  documentgenere                             documentgenere[]
  historiquestatut                           historiquestatut[]
  notificationdocument                       notificationdocument[]

  @@index([adminTraitantId], map: "DemandeDocument_adminTraitant_fkey")
  @@index([typeDocumentId], map: "DemandeDocument_typeDocument_fkey")
  @@index([userId], map: "DemandeDocument_userId_fkey")
}

model documentgenere {
  id                Int             @id @default(autoincrement())
  demandeDocumentId Int
  typeDocumentId    Int
  userId            Int
  numeroDocument    String          @unique(map: "DocumentGenere_numeroDocument_key")
  nomFichier        String
  cheminFichier     String
  tailleFichier     Int?
  statut            String          @default("genere")
  dateGeneration    DateTime        @default(now())
  dateEnvoi         DateTime?
  dateTelecharge    DateTime?
  nbTelecharge      Int             @default(0)
  hashDocument      String?
  signature         String?         @db.Text
  qrCode            String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  demandedocument   demandedocument @relation(fields: [demandeDocumentId], references: [id], map: "DocumentGenere_demandeDocument_fkey")
  typedocument      typedocument    @relation(fields: [typeDocumentId], references: [id], map: "DocumentGenere_typeDocument_fkey")
  user              user            @relation(fields: [userId], references: [id], map: "DocumentGenere_userId_fkey")

  @@index([demandeDocumentId], map: "DocumentGenere_demandeDocument_fkey")
  @@index([typeDocumentId], map: "DocumentGenere_typeDocument_fkey")
  @@index([userId], map: "DocumentGenere_userId_fkey")
}

model formation {
  id              Int           @id @default(autoincrement())
  titre           String
  description     String        @db.Text
  dateDebut       DateTime
  dateFin         DateTime
  heureDebut      String
  heureFin        String
  lieu            String
  maxParticipants Int           @default(20)
  prix            Float         @default(0)
  statut          String        @default("active")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  comment         comment[]
  inscription     inscription[]
  like            like[]
}

model historiquestatut {
  id                Int             @id @default(autoincrement())
  demandeDocumentId Int
  ancienStatut      String?
  nouveauStatut     String
  adminId           Int?
  motif             String?         @db.Text
  dateChangement    DateTime        @default(now())
  user              user?           @relation(fields: [adminId], references: [id], map: "HistoriqueStatut_adminId_fkey")
  demandedocument   demandedocument @relation(fields: [demandeDocumentId], references: [id], map: "HistoriqueStatut_demandeDocumentId_fkey")

  @@index([adminId], map: "HistoriqueStatut_adminId_fkey")
  @@index([demandeDocumentId], map: "HistoriqueStatut_demandeDocumentId_fkey")
}

model inscription {
  id              Int       @id @default(autoincrement())
  userId          Int
  formationId     Int
  statut          String    @default("en_attente")
  dateInscription DateTime  @default(now())
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  formation       formation @relation(fields: [formationId], references: [id], map: "Inscription_formationId_fkey")
  user            user      @relation(fields: [userId], references: [id], map: "Inscription_userId_fkey")

  @@unique([userId, formationId], map: "Inscription_userId_formationId_key")
  @@index([formationId], map: "Inscription_formationId_fkey")
}

model journalaudit {
  id               Int      @id @default(autoincrement())
  userId           Int?
  action           String
  table            String
  enregistrementId Int?
  anciennesValeurs String?  @db.LongText
  nouvellesValeurs String?  @db.LongText
  adresseIP        String?
  userAgent        String?  @db.Text
  createdAt        DateTime @default(now())
  user             user?    @relation(fields: [userId], references: [id], map: "JournalAudit_userId_fkey")

  @@index([userId], map: "JournalAudit_userId_fkey")
}

model like {
  id          Int       @id @default(autoincrement())
  userId      Int
  formationId Int
  createdAt   DateTime  @default(now())
  formation   formation @relation(fields: [formationId], references: [id], map: "Like_formationId_fkey")
  user        user      @relation(fields: [userId], references: [id], map: "Like_userId_fkey")

  @@unique([userId, formationId], map: "Like_userId_formationId_key")
  @@index([formationId], map: "Like_formationId_fkey")
  @@index([userId], map: "Like_userId_fkey")
}

model notificationdocument {
  id                Int             @id @default(autoincrement())
  demandeDocumentId Int
  userId            Int
  titre             String
  message           String          @db.Text
  type              String
  lu                Boolean         @default(false)
  dateLecture       DateTime?
  createdAt         DateTime        @default(now())
  demandedocument   demandedocument @relation(fields: [demandeDocumentId], references: [id], map: "NotificationDocument_demandeDocumentId_fkey")
  user              user            @relation(fields: [userId], references: [id], map: "NotificationDocument_userId_fkey")

  @@index([demandeDocumentId], map: "NotificationDocument_demandeDocumentId_fkey")
  @@index([userId], map: "NotificationDocument_userId_fkey")
}

model plagehoraire {
  id         Int      @id @default(autoincrement())
  jour       String
  heureDebut String
  heureFin   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model rendezvous {
  id        Int      @id @default(autoincrement())
  date      DateTime
  heure     String
  status    String   @default("en_attente")
  notes     String?  @db.Text
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  service   service  @relation(fields: [serviceId], references: [id], map: "RendezVous_serviceId_fkey")
  user      user     @relation(fields: [userId], references: [id], map: "RendezVous_userId_fkey")

  @@index([serviceId], map: "RendezVous_serviceId_fkey")
  @@index([userId], map: "RendezVous_userId_fkey")
}

model service {
  id          Int          @id @default(autoincrement())
  nom         String
  description String       @db.Text
  duree       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  rendezvous  rendezvous[]
}

model templateemail {
  id        Int      @id @default(autoincrement())
  nom       String   @unique(map: "TemplateEmail_nom_key")
  sujet     String
  corps     String   @db.LongText
  actif     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model typedocument {
  id              Int               @id @default(autoincrement())
  nom             String
  description     String            @db.Text
  documentsRequis String            @db.Text
  delaiTraitement Int
  prix            Float             @default(0)
  actif           Boolean           @default(true)
  template        String?           @db.LongText
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  demandedocument demandedocument[]
  documentgenere  documentgenere[]
}

model user {
  id                                                    Int                     @id @default(autoincrement())
  nom                                                   String
  prenom                                                String
  email                                                 String                  @unique(map: "User_email_key")
  motDePasse                                            String
  numRegistreCommerce                                   String                  @unique(map: "User_numRegistreCommerce_key")
  secteurActivite                                       String
  telephone                                             String
  adresse                                               String
  createdAt                                             DateTime                @default(now())
  updatedAt                                             DateTime
  role                                                  String                  @default("client")
  status                                                String                  @default("actif")
  comment                                               comment[]
  demandedocument_demandedocument_adminTraitantIdTouser demandedocument[]       @relation("demandedocument_adminTraitantIdTouser")
  demandedocument_demandedocument_userIdTouser          demandedocument[]       @relation("demandedocument_userIdTouser")
  documentgenere                                        documentgenere[]
  historiquestatut                                      historiquestatut[]
  inscription                                           inscription[]
  journalaudit                                          journalaudit[]
  like                                                  like[]
  notificationdocument                                  notificationdocument[]
  rendezvous                                            rendezvous[]
  avis                                                  avis[]
  reclamation                                           reclamation[]
  reclamation_adminTraitant                             reclamation[]           @relation("reclamation_adminTraitantTouser")
  historiquereclamation                                 historiquereclamation[]
}

model avis {
  id          Int      @id @default(autoincrement())
  userId      Int
  sujet       String
  commentaire String   @db.Text
  note        Int      @default(0) // Note de 1 à 5
  typeService String // formation, document, rendez-vous, general
  serviceId   Int? // ID du service concerné (formationId, rendezvousId, etc.)
  statut      String   @default("actif") // actif, masque, supprime
  visible     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([typeService])
  @@index([statut])
}

model reclamation {
  id                Int                     @id @default(autoincrement())
  userId            Int
  sujet             String
  description       String                  @db.Text
  typeReclamation   String // service, document, formation, technique, autre
  priorite          String                  @default("normale") // basse, normale, haute, urgente
  statut            String                  @default("ouverte") // ouverte, en_cours, resolue, fermee
  numeroReclamation String                  @unique
  serviceId         Int? // ID du service concerné si applicable
  adminTraitantId   Int?
  dateTraitement    DateTime?
  dateResolution    DateTime?
  reponseAdmin      String?                 @db.Text
  satisfaction      Int? // Note de satisfaction après résolution (1-5)
  commentaireFinal  String?                 @db.Text
  fichierJoint      String? // Chemin vers un fichier joint si nécessaire
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  user              user                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminTraitant     user?                   @relation("reclamation_adminTraitantTouser", fields: [adminTraitantId], references: [id])
  historique        historiquereclamation[]

  @@index([userId])
  @@index([adminTraitantId])
  @@index([statut])
  @@index([typeReclamation])
  @@index([priorite])
}

model historiquereclamation {
  id            Int         @id @default(autoincrement())
  reclamationId Int
  ancienStatut  String?
  nouveauStatut String
  adminId       Int?
  commentaire   String?     @db.Text
  dateAction    DateTime    @default(now())
  typeAction    String // creation, modification, traitement, resolution, fermeture
  reclamation   reclamation @relation(fields: [reclamationId], references: [id], onDelete: Cascade)
  admin         user?       @relation(fields: [adminId], references: [id])

  @@index([reclamationId])
  @@index([adminId])
  @@index([dateAction])
}
