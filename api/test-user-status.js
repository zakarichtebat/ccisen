const axios = require('axios');

// Configuration
const API_BASE = 'http://localhost:3000';
axios.defaults.withCredentials = true;

// Fonction pour tester la connexion avec diff√©rents statuts
async function testUserStatusLogin() {
  console.log('üß™ Test des connexions selon le statut utilisateur\n');

  // Test 1: Utilisateur actif (devrait fonctionner)
  console.log('1Ô∏è‚É£ Test utilisateur ACTIF:');
  try {
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@ccisn.ma',
      motDePasse: 'admin123'
    });
    console.log('‚úÖ Connexion r√©ussie pour utilisateur actif');
    console.log(`   Utilisateur: ${response.data.user.nom} ${response.data.user.prenom}`);
    console.log(`   Statut: ${response.data.user.status}`);
    
    // D√©connexion
    await axios.post(`${API_BASE}/auth/logout`);
  } catch (error) {
    console.log('‚ùå Erreur inattendue pour utilisateur actif:', error.response?.data?.message);
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 2: Utilisateur inactif (devrait √©chouer)
  console.log('2Ô∏è‚É£ Test utilisateur INACTIF:');
  try {
    // D'abord, changer le statut d'un utilisateur en inactif
    console.log('   Changement du statut de l\'utilisateur...');
    
    // Se connecter en admin d'abord
    const adminLogin = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@ccisn.ma',
      motDePasse: 'admin123'
    });
    
    // Changer le statut d'un utilisateur test (ID 2 par exemple)
    await axios.patch(`${API_BASE}/users/2/status`, {
      status: 'inactif'
    });
    
    // D√©connexion admin
    await axios.post(`${API_BASE}/auth/logout`);
    
    // Maintenant tenter de se connecter avec cet utilisateur
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email: 'ahmed.alami@example.com',
      motDePasse: 'password123'
    });
    
    console.log('‚ùå PROBL√àME: Utilisateur inactif a pu se connecter!');
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚úÖ Connexion correctement refus√©e pour utilisateur inactif');
      console.log(`   Message: ${error.response.data.message}`);
    } else {
      console.log('‚ùå Erreur inattendue:', error.response?.data?.message);
    }
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 3: Utilisateur bloqu√© (devrait √©chouer)
  console.log('3Ô∏è‚É£ Test utilisateur BLOQU√â:');
  try {
    // Se connecter en admin
    const adminLogin = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@ccisn.ma',
      motDePasse: 'admin123'
    });
    
    // Changer le statut d'un utilisateur en bloqu√© (ID 3 par exemple)
    await axios.patch(`${API_BASE}/users/3/status`, {
      status: 'bloque'
    });
    
    // D√©connexion admin
    await axios.post(`${API_BASE}/auth/logout`);
    
    // Tenter de se connecter avec cet utilisateur
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email: 'fatima.benali@example.com',
      motDePasse: 'password123'
    });
    
    console.log('‚ùå PROBL√àME: Utilisateur bloqu√© a pu se connecter!');
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚úÖ Connexion correctement refus√©e pour utilisateur bloqu√©');
      console.log(`   Message: ${error.response.data.message}`);
    } else {
      console.log('‚ùå Erreur inattendue:', error.response?.data?.message);
    }
  }

  console.log('\n' + '='.repeat(50) + '\n');

  // Test 4: V√©rification du statut pendant une session
  console.log('4Ô∏è‚É£ Test v√©rification statut pendant session:');
  try {
    // Se connecter avec un utilisateur
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@ccisn.ma',
      motDePasse: 'admin123'
    });
    console.log('   Connexion initiale r√©ussie');
    
    // V√©rifier le statut
    const statusCheck = await axios.post(`${API_BASE}/auth/check-status`);
    console.log(`   Statut v√©rifi√©: ${statusCheck.data.message}`);
    console.log(`   Valide: ${statusCheck.data.isValid}`);
    
    // D√©connexion
    await axios.post(`${API_BASE}/auth/logout`);
  } catch (error) {
    console.log('‚ùå Erreur lors du test de v√©rification:', error.response?.data?.message);
  }

  console.log('\nüèÅ Tests termin√©s!');
}

// Test de restauration des statuts
async function restoreUserStatuses() {
  console.log('\nüîÑ Restauration des statuts utilisateur...');
  
  try {
    // Se connecter en admin
    await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@ccisn.ma',
      motDePasse: 'admin123'
    });
    
    // Remettre les utilisateurs en actif
    await axios.patch(`${API_BASE}/users/2/status`, { status: 'actif' });
    await axios.patch(`${API_BASE}/users/3/status`, { status: 'actif' });
    
    console.log('‚úÖ Statuts restaur√©s √† "actif"');
    
    // D√©connexion
    await axios.post(`${API_BASE}/auth/logout`);
  } catch (error) {
    console.log('‚ùå Erreur lors de la restauration:', error.response?.data?.message);
  }
}

// Ex√©cution des tests
async function runTests() {
  try {
    await testUserStatusLogin();
    await restoreUserStatuses();
  } catch (error) {
    console.error('Erreur g√©n√©rale:', error.message);
  }
}

// Lancer les tests si le script est ex√©cut√© directement
if (require.main === module) {
  runTests();
}

module.exports = { testUserStatusLogin, restoreUserStatuses }; 